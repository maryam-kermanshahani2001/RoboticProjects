// Generated by gencpp from file hw0/motor_topic.msg
// DO NOT EDIT!


#ifndef HW0_MESSAGE_MOTOR_TOPIC_H
#define HW0_MESSAGE_MOTOR_TOPIC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hw0
{
template <class ContainerAllocator>
struct motor_topic_
{
  typedef motor_topic_<ContainerAllocator> Type;

  motor_topic_()
    : rotation(0)
    , clockwise(false)  {
    }
  motor_topic_(const ContainerAllocator& _alloc)
    : rotation(0)
    , clockwise(false)  {
  (void)_alloc;
    }



   typedef int64_t _rotation_type;
  _rotation_type rotation;

   typedef uint8_t _clockwise_type;
  _clockwise_type clockwise;





  typedef boost::shared_ptr< ::hw0::motor_topic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hw0::motor_topic_<ContainerAllocator> const> ConstPtr;

}; // struct motor_topic_

typedef ::hw0::motor_topic_<std::allocator<void> > motor_topic;

typedef boost::shared_ptr< ::hw0::motor_topic > motor_topicPtr;
typedef boost::shared_ptr< ::hw0::motor_topic const> motor_topicConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hw0::motor_topic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hw0::motor_topic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hw0::motor_topic_<ContainerAllocator1> & lhs, const ::hw0::motor_topic_<ContainerAllocator2> & rhs)
{
  return lhs.rotation == rhs.rotation &&
    lhs.clockwise == rhs.clockwise;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hw0::motor_topic_<ContainerAllocator1> & lhs, const ::hw0::motor_topic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hw0

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hw0::motor_topic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hw0::motor_topic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hw0::motor_topic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hw0::motor_topic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw0::motor_topic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw0::motor_topic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hw0::motor_topic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f09a113fbdc065e6685b77041855ae5";
  }

  static const char* value(const ::hw0::motor_topic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f09a113fbdc065eULL;
  static const uint64_t static_value2 = 0x6685b77041855ae5ULL;
};

template<class ContainerAllocator>
struct DataType< ::hw0::motor_topic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hw0/motor_topic";
  }

  static const char* value(const ::hw0::motor_topic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hw0::motor_topic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 rotation\n"
"bool clockwise\n"
;
  }

  static const char* value(const ::hw0::motor_topic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hw0::motor_topic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rotation);
      stream.next(m.clockwise);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_topic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hw0::motor_topic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hw0::motor_topic_<ContainerAllocator>& v)
  {
    s << indent << "rotation: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rotation);
    s << indent << "clockwise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clockwise);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HW0_MESSAGE_MOTOR_TOPIC_H
